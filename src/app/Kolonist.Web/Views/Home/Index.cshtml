@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>
<div id="hero" class="hero-unit" style="position: absolute;">
    my content
    <div>
        <button class="btn">a Button</button>
        <div class="control-group alert ">alert! attention <span class="close">x</span></div>
    </div>
</div>
<div id="container" style="width: 100%; height: 100%;">
</div>
<div id="tmp"></div>

@section Scripts{
    <script type="x-shader/x-fragment" id="fragmentShader">
        #ifdef GL_ES
precision highp float;
#endif

uniform sampler2D alpha;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform sampler2D tex3;

uniform float texscale;

varying vec2 vUv;

void main()
{
    vec4 finalColor ;
      
   // Get the color information 
   vec4 mixmap    = texture2D( alpha, vUv ).rgba;
   vec3 texSand  = texture2D( tex0, vUv * texscale ).rgb;
   vec3 texGrass = texture2D( tex1, vUv * texscale).rgb;
   vec3 texWater = texture2D( tex2, vUv * texscale ).rgb;
   vec3 texRock  = texture2D( tex3, vUv * texscale ).rgb;
        
    float a = mixmap.a;
    if(a<=0.01)
        a=0.0;

   // Mix the colors together
   texSand *= mixmap.r;
   texGrass = mix(texSand,  texGrass, mixmap.g);
   texWater = mix(texGrass, texWater, mixmap.b);        
   vec3 tex  = mix(texWater, texRock, a);

    finalColor = vec4(tex,1.0);
    gl_FragColor  = finalColor;
}
    </script>
    <script id="vertexShader" type="x-shader/x-vertex">
            varying vec2 vUv;
            varying vec3 vNormal;

            void main()
            {
                vUv = uv;
        
                vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
                gl_Position = projectionMatrix * mvPosition;

                vNormal = normalMatrix * normal;
            }
    </script>
    <script>
        var oldPos = new THREE.Vector3(0, 0, 0);

        var renderer;

        function init() {
            var $container = $('#container');
            renderer = new Renderer($container);

            renderer.init({ width: $container.width(), heigth: $container.height() });

            //var ambientLight = new THREE.AmbientLight(0x00ff00);
            var light = new THREE.DirectionalLight(0xffffff);
            //light.translateZ(200);
            light.position.set(0, 0, 1).normalize();
            var imageLoader = new THREE.ImageLoader();
            var image = new Image();
            imageLoader.load('@Url.Content("~/Content/texture.jpg")', image);

            var texture = new THREE.Texture(image);

            //renderer.addMesh(ambientLight);
            renderer.addMesh(light);
            renderer.loadMap('http://localhost:12930/api/map/1600');

            var material = new THREE.MeshLambertMaterial({
                color: 0x0000ff
            });
            var cube = new THREE.Mesh(new THREE.CubeGeometry(10, 10, 10), material);
            cube.rotation.y += 5;
            cube.rotation.x += 5;
            //    renderer.addMesh(cube);
            renderer.animate(function () {
                //mesh.rotation.x += 0.01;
                //mesh.rotation.y += 0.02;
            });

        }
        init();


        $(function () {
            $('#container').click(function (evnt) {
                //$('#hero').offset({
                //    left: evnt.clientX,
                //    top: evnt.clientY
                //});

            });
        });
    </script>
}